#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <75>;
};

&mt {
    tapping-term-ms = <150>;
    flavor = "tap-preferred";
    quick-tap-ms = <75>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph 

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        Hiragana: Hiragana {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(SPACE)>;
            label = "HIRAGANA";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&kp Q             &kp W         &kp E           &kp R           &kp T                               &kp Y  &kp U           &kp I           &kp O        &kp P
&kp A             &mt LCTRL S   &mt LEFT_GUI D  &mt LEFT_ALT F  &kp G                               &kp H  &mt LEFT_ALT J  &mt LEFT_GUI K  &mt LCTRL L  &kp ENTER
&mt LEFT_SHIFT Z  &kp X         &kp C           &kp V           &kp B                               &kp N  &kp M           &kp COMMA       &kp DOT      &mt LEFT_SHIFT SLASH
&kp LCTRL         &kp LEFT_WIN  &kp LALT        &mo 3           &mo 1  &mt LEFT_SHIFT SPACE  &mo 1  &mo 2                                               &mo 3
            >;
        };

        mouse {
            label = "mouse";
            bindings = <
&kp ESCAPE  &none           &kp UP_ARROW  &kp BACKSPACE  &bt BT_SEL 2                  &none   &kp LA(LEFT_ARROW)  &kp LA(RIGHT)   &none      &kp MINUS
&kp TAB     &kp LEFT_ARROW  &kp DOWN      &kp RIGHT      &bt BT_SEL 0                  &none   &kp LANG1           &kp LANGUAGE_2  &none      &kp DELETE
&trans      &none           &none         &none          &bt BT_SEL 1                  &none   &mkp LCLK           &mkp MCLK       &mkp RCLK  &mkp MB4
&trans      &trans          &trans        &trans         &trans        &trans  &trans  &trans                                                 &trans
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
&kp ESCAPE  &kp F9  &kp F10  &kp F11  &kp F12                  &kp INS             &kp HOME        &kp UP_ARROW    &kp PAGE_UP    &kp BACKSPACE
&kp TAB     &kp F5  &kp F6   &kp F7   &kp F8                   &none               &kp LEFT_ARROW  &none           &kp RIGHT      &trans
&trans      &trans  &kp F2   &kp F3   &kp F4                   &kp K_CONTEXT_MENU  &kp END         &kp DOWN_ARROW  &kp PAGE_DOWN  &trans
&trans      &trans  &trans   &trans   &trans   &trans  &trans  &trans                                                             &trans
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&kp GRAVE      &kp N7        &kp N8        &kp N9        &kp MINUS                      &kp LS(NUMBER_1)      &kp LS(MINUS)  &kp LS(N9)            &kp LS(N0)             &kp MINUS
&kp LS(GRAVE)  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp EQUAL                      &kp LS(NUMBER_2)      &kp SQT        &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp SEMICOLON
&kp N0         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp LS(EQUAL)                  &kp NON_US_BACKSLASH  &kp LS(SQT)    &kp LS(LEFT_BRACKET)  &kp LS(RIGHT_BRACKET)  &kp LS(SEMICOLON)
&trans         &trans        &trans        &trans        &trans         &trans  &trans  &trans                                                                            &trans
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans
            >;
        };
    };
};
